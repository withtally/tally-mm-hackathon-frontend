[{"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/index.tsx":"1","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/reportWebVitals.ts":"2","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/App.tsx":"3","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/hooks/useWeb3.ts":"4","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/components/Header.tsx":"5","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/components/Footer.tsx":"6","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/components/Container.tsx":"7","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/home/components/Home.tsx":"8","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/vault/components/Vault.tsx":"9","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/home/components/VaultTable.tsx":"10","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/home/hooks/useToken.ts":"11","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/lib/helpers.ts":"12","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/hooks/useVaultFactory.ts":"13","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/lib/modules.ts":"14","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/hooks/useNotify.ts":"15","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/home/hooks/useCreateVault.ts":"16","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/vault/hooks/useCloseVault.ts":"17"},{"size":479,"mtime":1612324827341,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1612217959603,"results":"20","hashOfConfig":"19"},{"size":708,"mtime":1612524820571,"results":"21","hashOfConfig":"19"},{"size":4740,"mtime":1612461381066,"results":"22","hashOfConfig":"19"},{"size":712,"mtime":1612324862098,"results":"23","hashOfConfig":"19"},{"size":564,"mtime":1612514569504,"results":"24","hashOfConfig":"19"},{"size":696,"mtime":1612524877989,"results":"25","hashOfConfig":"19"},{"size":3239,"mtime":1612525487865,"results":"26","hashOfConfig":"19"},{"size":2062,"mtime":1612526891086,"results":"27","hashOfConfig":"19"},{"size":922,"mtime":1612516769835,"results":"28","hashOfConfig":"19"},{"size":934,"mtime":1612526196777,"results":"29","hashOfConfig":"19"},{"size":253,"mtime":1612512370692,"results":"30","hashOfConfig":"19"},{"size":790,"mtime":1612526854420,"results":"31","hashOfConfig":"19"},{"size":1510,"mtime":1612517415321,"results":"32","hashOfConfig":"19"},{"size":388,"mtime":1612520386608,"results":"33","hashOfConfig":"19"},{"size":470,"mtime":1612525371114,"results":"34","hashOfConfig":"19"},{"size":641,"mtime":1612526360852,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"18dbnjc",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/index.tsx",[],["75","76"],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/reportWebVitals.ts",[],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/App.tsx",[],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/hooks/useWeb3.ts",["77","78","79"],"// @ts-nocheck\nimport { useState, useEffect, useMemo } from 'react';\nimport { useToast } from '@chakra-ui/react';\nimport { Contract, ethers } from 'ethers';\nimport { JsonRpcSigner } from '@ethersproject/providers/lib/json-rpc-provider';\nimport { Provider } from '@ethersproject/providers';\nimport constate from 'constate';\n\ntype Values = {\n    web3: ethers.providers.Web3Provider;\n    isWeb3Ready: boolean;\n    openMetamask: () => Promise<void>;\n    signer: JsonRpcSigner;\n    chainId: number;\n    signerAddress: string;\n    contractInstance?: Contract;\n    currentBlock?: number;\n    etherBalance?: string;\n};\n\nconst contract = {\n    address: \"\",\n    abi: \"\"\n}\n\nconst useWeb3Constate = (): Values => {\n\n    // chakra hooks\n    const toast = useToast();\n\n    // providers\n    // react hooks\n    const [web3Provider, setWeb3Provider] = useState<Provider | null>(null);\n    const [chainId, setChainId] = useState<number>(1);\n    const [currentBlock, setCurrentBlock] = useState<number | undefined>(undefined);\n    const [etherBalance, setEtherBalance] = useState<string | undefined>(undefined);\n    const [contractInstance, setcontractInstance] = useState<Contract | undefined>(undefined);\n    const [signerAddress, setSignerAddress] = useState<string>('');\n    const [isWeb3Ready, setIsWeb3Ready] = useState<boolean>(false);\n\n    // variables\n    const signer = useMemo(() => {\n        if (web3Provider) return web3Provider.getSigner();\n    }, [web3Provider]);\n\n    // constants\n    const isDomReady = window?.ethereum;\n\n    // methods\n    const openMetamask = async () => {\n        try {\n            await window.ethereum.enable();\n\n            setProvider();\n        } catch (error) {\n            toast({\n                title: \"Warning.\",\n                description: \"Install Metamask to use this feature.\",\n                status: \"warning\",\n                isClosable: true,\n            });\n\n            console.error('Error opening Metamask =>', error.message);\n        }\n    };\n\n    const setProvider = async () => {\n        try {\n            const provider = isDomReady ? new ethers.providers.Web3Provider(window?.ethereum) : null;\n\n            setWeb3Provider(provider);\n        } catch (error) {\n            console.error('Error setting the web3 provider =>', error.message);\n        }\n    };\n\n    // effects\n    useEffect(() => {\n        setProvider();\n    }, []);\n\n    useEffect(() => {\n        if (web3Provider) {\n            web3Provider?.getNetwork().then((network) => {\n                const { chainId } = network;\n\n                setChainId(chainId);\n            });\n        }\n    }, [web3Provider]);\n\n    useEffect(() => {\n        window?.ethereum?.on('accountsChanged', (accounts: string[]) => {\n            const hasConnectedAnAccount = accounts?.length > 0;\n\n            if (!hasConnectedAnAccount) {\n                setSignerAddress('');\n            }\n\n            const signerAddress = accounts[0];\n\n            setSignerAddress(signerAddress);\n        });\n\n        window?.ethereum?.on('chainChanged', (chainIdResponse) => {\n            const chainIdIdentifier = chainIdResponse?.split('x')[1];\n\n            const NETWORKS_IDS = {\n                1: 1,\n                3: 3,\n                '2a': 42,\n                4: 4,\n                5: 5,\n            };\n\n            const chainId = NETWORKS_IDS[chainIdIdentifier];\n\n            if (chainId) {\n                setChainId(chainId);\n            }\n        });\n    });\n\n    useEffect(() => {\n        if (signer) {\n            signer\n                ?.getAddress()\n                .then((address: string) => {\n                    setSignerAddress(address);\n                    setIsWeb3Ready(true);\n                })\n                .catch(() => setIsWeb3Ready(false));\n        }\n    }, [signer]);\n\n    useEffect(() => {\n        if (isWeb3Ready) {\n            web3Provider.getBlockNumber().then((block: number) => setCurrentBlock(block));\n            web3Provider.getBalance(signerAddress).then((balance: string) => setEtherBalance(ethers.utils.formatUnits(balance, \"ether\")));\n\n\n            if (contract.address) {\n                const contractInstance = new Contract(contract.address, contract.abi, signer);\n\n                setcontractInstance(contractInstance);\n            }\n        }\n    }, [isWeb3Ready]);\n\n    useEffect(() => {\n        if (isDomReady) {\n            window.ethereum.autoRefreshOnNetworkChange = false;\n        }\n    }, []);\n\n    return {\n        web3: web3Provider,\n        isWeb3Ready,\n        openMetamask,\n        chainId,\n        signer,\n        signerAddress,\n        currentBlock,\n        contractInstance,\n        etherBalance\n    };\n};\n\nconst [Web3Provider, useWeb3] = constate(useWeb3Constate);\n\nexport { Web3Provider, useWeb3 };","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/components/Header.tsx",["80"],"import React, { FC } from \"react\";\nimport { Flex, Button, Text, HStack } from \"@chakra-ui/react\";\n\nimport { useWeb3 } from \"../hooks/useWeb3\";\n\ntype Props = {}\n\nconst Header: FC<Props> = () => {\n  const { etherBalance, isWeb3Ready, openMetamask, signerAddress } = useWeb3();\n\n  return (\n      <Flex justifyContent=\"flex-end\" alignItems=\"center\" margin=\"15px\">\n        <HStack spacing=\"20px\">\n          <Text>\n            {etherBalance ? Number(etherBalance).toFixed(2) : '0.0'} ETH\n          </Text>\n          <Button colorScheme=\"teal\" onClick={() => openMetamask()}>\n            {isWeb3Ready ? \"Connected\" : \"Connect Metamask\"}\n          </Button>\n        </HStack>\n      </Flex>\n  );\n}\n\nexport default Header;","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/components/Footer.tsx",[],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/components/Container.tsx",[],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/home/components/Home.tsx",["81"],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/vault/components/Vault.tsx",[],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/home/components/VaultTable.tsx",["82","83"],"import React, { FC } from 'react';\nimport { Flex, FlexProps, Text, Table, Thead, Tbody, Tr, Th, Td, Badge } from '@chakra-ui/react';\n\ntype Props = {};\n\nconst VaultTable: FC<Props & FlexProps> = () => (\n    <Table variant=\"simple\">\n      <Thead>\n        <Tr>\n          <Th>Address</Th>\n          <Th>Balance</Th>\n          <Th>Linked NFT</Th>\n          <Th>State</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        <Tr>\n          <Td>0x0</Td>\n          <Td>25.4</Td>\n          <Td>1</Td>\n          <Td><Badge colorScheme=\"green\">Active</Badge></Td>\n        </Tr>\n        <Tr>\n          <Td>0x0</Td>\n          <Td>30.48</Td>\n          <Td>2</Td>\n          <Td><Badge>Inactive</Badge></Td>\n        </Tr>\n        <Tr>\n          <Td>0x0</Td>\n          <Td>0.91444</Td>\n          <Td>3</Td>\n          <Td><Badge colorScheme=\"red\">Expired</Badge></Td>\n        </Tr>\n      </Tbody>\n    </Table>\n);\n\nexport default VaultTable;\n","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/home/hooks/useToken.ts",[],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/lib/helpers.ts",[],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/hooks/useVaultFactory.ts",["84"],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/lib/modules.ts",[],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/common/hooks/useNotify.ts",["85"],"import { useMemo } from 'react';\nimport Notify, { API } from 'bnc-notify';\n\ntype Values = { notify: API };\n\ntype Props = {\n  chainId: number;\n};\n\nexport const useNotify = ({ chainId }: Props): Values => {\n  const notify = useMemo(\n    () =>\n      Notify({\n        dappId: 'e92b2934-86e1-4d98-8b3c-8188c99f6bda',\n        networkId: chainId,\n      }),\n    [],\n  );\n\n  return { notify };\n};\n","/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/home/hooks/useCreateVault.ts",[],"/Users/natacha/Developer/Tally/hackathon/tally-mm-hackathon-frontend/src/vault/hooks/useCloseVault.ts",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":80,"column":8,"nodeType":"92","endLine":80,"endColumn":10,"suggestions":"93"},{"ruleId":"90","severity":1,"message":"94","line":148,"column":8,"nodeType":"92","endLine":148,"endColumn":21,"suggestions":"95"},{"ruleId":"90","severity":1,"message":"96","line":154,"column":8,"nodeType":"92","endLine":154,"endColumn":10,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":9,"column":52,"nodeType":"100","messageId":"101","endLine":9,"endColumn":65},{"ruleId":"90","severity":1,"message":"102","line":72,"column":6,"nodeType":"92","endLine":72,"endColumn":21,"suggestions":"103"},{"ruleId":"98","severity":1,"message":"104","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":14},{"ruleId":"98","severity":1,"message":"105","line":2,"column":27,"nodeType":"100","messageId":"101","endLine":2,"endColumn":31},{"ruleId":"98","severity":1,"message":"106","line":1,"column":21,"nodeType":"100","messageId":"101","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"107","line":17,"column":5,"nodeType":"92","endLine":17,"endColumn":7,"suggestions":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setProvider'. Either include it or remove the dependency array.","ArrayExpression",["111"],"React Hook useEffect has missing dependencies: 'signer', 'signerAddress', and 'web3Provider'. Either include them or remove the dependency array.",["112"],"React Hook useEffect has a missing dependency: 'isDomReady'. Either include it or remove the dependency array.",["113"],"@typescript-eslint/no-unused-vars","'signerAddress' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'asyncBalance'. Either include it or remove the dependency array.",["114"],"'Flex' is defined but never used.","'Text' is defined but never used.","'utils' is defined but never used.","React Hook useMemo has a missing dependency: 'chainId'. Either include it or remove the dependency array.",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [setProvider]",{"range":"126","text":"127"},"Update the dependencies array to be: [isWeb3Ready, signer, signerAddress, web3Provider]",{"range":"128","text":"129"},"Update the dependencies array to be: [isDomReady]",{"range":"130","text":"131"},"Update the dependencies array to be: [asyncBalance, signerAddress]",{"range":"132","text":"133"},"Update the dependencies array to be: [chainId]",{"range":"134","text":"135"},[2371,2373],"[setProvider]",[4275,4288],"[isWeb3Ready, signer, signerAddress, web3Provider]",[4421,4423],"[isDomReady]",[1632,1647],"[asyncBalance, signerAddress]",[354,356],"[chainId]"]